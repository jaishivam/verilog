module upCounter(clk,y);
input clk;
output reg [3:0]y;
integer i;
initial
y<=4b000;
always @ (posedge clk) 
for (i=0; i<16; i=i+1)
y=y'4b0001;
endmodule
------------------------
module upCountertb();
reg clk;
wire [3:0] y;
upCounter cl(clk,y);
initial
clk = 1'b0;
always
#2 clk=~clk;
initial
begin
#32 $stop;
end
endmodule
/////////////////////////////////////////////
module downCounter(clk,y);
input clk;
output reg [3:0]y;
integer i;
initial
y<=4'b000;
always @ (posedge clk)
for (i=0; i<16; i=i+1)
y<=y'4b0001;
endmodule
---------------------
module downCountertb();
reg clk;
wire [3:0] y:
downCounter cl(clk,y);
initial
clk = 1'b0;
always
#2 clk-clk;
initial
begin
#32 Sstop;
end
endmodule
///////////////////////////////////////////////
module fourmux(i0, i1, i2, i3, s0,s1,y); 
input i0, i1, i2, i3, s0, s1;
output reg y;
always @ (*)
begin
y=((~s1)&(~s0)&(i0)|(~s1)&(s0)&(i1) | (s1)&(~s0)&(i2) | (s1)&(s0)&(i3));
end
endmodule

module fourmuxl(i0, il, i2, 13, s0,sl,y); 
input i0, i1,i2,i3,s0,s1;
output reg y;
always @ (*)
begin
if(s1==0&&s0==0)
y=i0;
else if(s1==0&&s0==1)
y=i1;
else if(s1==1&&s0==0)
y=12;
else
y=13;
end
endmodule






///////////////////////////////////////
module dff(clk,rst,d,q);
input clk, rst,d;
output reg q;
initial
q=1'b0;
always @(posedge clk)
begin
if(rst)
q=l'b0;
else
q=d:
end
endmodule
..........................
module dfftb();
reg clk,rst,d;
wire q;
dff dl(clk,rst,d,q);
initial
begin
clk=1'b0;
forever #3 clk=~clk;
end
initial
begin
rst=1; d=0;
#3
rst=0; d=1;
#6 $stop;
end
endmodule
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
module jkff(clk, rst,j,k,q);
input clk, rst,j,k;
output reg q;
initial
q=1'b0;
always @ (posedge clk)
begin
if(rst)
q=1'b0;
else
if(j==0&&k==0)
q=q;
else if(j==0&&k==1)
q=1'b0;
else if(j==1&&k==0)
q=1'b1;
else
q=(~q);
end
endmodule
..........................
module jkfftb();
reg clk,rst,j,k;
wire q;
jkff jk1(clk,rst,j,k,q);
initial
begin
clk=1'b0;
forever #3 clk=(-clk);
end
initial
begin
rst=1;j=0;k=0;
#3
rst=0;j=0;k=0;
#3
rst=0;j=0;k=1;
#3
rst=0;j=1;k=0;
#3
rst=0;j=1;k=1;
#6 $stop;
end
endmodule
/////////////////////////////////////////////////

module SRff(clk, rst,S,R,q);
input clk, rst,S,R;
output reg q;
initial
q=1'b0;
always @ (posedge clk)
begin
if(rst)
q=1'b0;
else
if(S==0&&R==0)
q=q;
else if (S==0&&R==1)
q=1'b0;
else if (S==1&&R==0)
q=1'b1;
else
q=1'bx;
end
endmodule
........................
module SRfftb(); reg clk, rst,S,R; wire q; 
SRff SR1(clk, rst,S,R,q);
initial clk=1'b0;
always
 #3 clk=(~clk);
initial
begin
rst=1;S=0;R=0;
#3
rst=0;S=0;R=0;
#3
rst=0;S=0; R=1;
#3
rst=0;S=1;R=0;
#3
rst=0;S=1;R=1;
#6 $stop;
end
endmodule
/////////////////////////////////////////////////////
module tff(clk, rst,t,q);
input clk, rst,t;
output reg q;
initial
q=1'b0;
always @(posedge clk)
begin
if(rst)
q=1'b0;
else
if(t==0)
q=q;
else
q=(~q);
end
endmodule
......................
module tfftb();
reg clk,rst,t;
wire q;
tff tl(clk,rst.t.q);
initial
begin
clk=1'b0;
forever #3 clk=~clk;
end
initial
begin
rst=l: t=0;
#3
rst=0; t=0:
#3
rst=0; t=l;
#6 $stop:
end
endmodule
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
module upordown_counter(
clk, reset,
upordown, count
);
input clk, reset, upordown;
output[3:0]count;
reg[3:0] count=0;
always @ (posedge (clk) or posedge (reset))
begin
if (reset==1)
count<=0;
else
if(upordown==1)
if(count==15)
count<=0;
else 
count<=count+1;
else
if(count==0)
count<=15;
else 
count<=count-1;
end
endmodule
..............................
module tb counter:
reg clk;
reg reset;
reg upordown;
wire [3:0] count;
upordown counter uut (
.clk(clk),
.reset (reset),
.upordown(upordown),
.count(count)
);
v initial
clk =0;
always #5 clk=-clk;
initial begin
reset = 0;
upordown =0;
#300;
upordown=1;
#300;
reset =1;
upordown = 0;
#100;
reset=0;
end
endmodule
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\